{"name":"Car-Detection","tagline":"Computer Vision","body":"# [Car Detection](https://github.com/carlosmccosta/Car-Detection/)\r\n\r\n\r\n## Overview\r\n***\r\nThis project focus on the detection and recognition of cars in different perspective views and has the following associated paper:\r\n\r\n[Multiview object recognition using Bag of Words approach](https://github.com/carlosmccosta/Car-Detection/raw/master/Report/Multiview%20object%20recognition%20using%20Bag%20of%20Words%20approach.pdf)\r\n\r\n\r\n**Abstract:**\r\nMultiview object detection and classification plays a \r\ncritical  role  in  robust  image  recognition  systems,  and  can  be \r\napplied  in  a  multitude  of  applications,  ranging  from  simple \r\nmonitoring  to advanced tracking. In this paper it is analyzed the \r\nusage of the Bag of Words model to efficiently detect and recognize \r\nobjects that can appear in different  scales, orientations and even \r\nfrom  different  perspective  views.  This  approach  relies  in  image \r\nanalysis  techniques,  such  as  feature  detection,  description  and \r\nclustering, in order to be able to recognize the target object even if \r\nit  is  present  in  cluttered  environments.  For  supporting  the \r\nrecognition  in  different  perspective  views,  machine  learning \r\ntechniques  are  used  to build  a  model  of the target  objects. This \r\nmodel  can  then  be  employed  to  successfully  recognize  if  an \r\ninstance of the  target object is present in  an  image.  For pinpointing \r\nthe location  of the target object, a sliding window method is used\r\nin conjunction with dynamic thresholding. The recognition system \r\nwas  tested  with  several  configurations  of  feature  detectors, \r\ndescriptors  and classifiers, and achieved an accuracy of 87% when \r\nrecognizing cars from 177 test images.\r\n\r\n\r\n\r\n## Results\r\n\r\n![Fig. 1 - Effect of preprocessing (right) in the original image \r\n(left)](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/1%20-%20Effect%20of%20preprocessing%20(right)%20in%20the%20original%20image%20(left).png)\r\nFig. 1 - Effect of preprocessing (right) in the original image \r\n(left)\r\n\r\n\r\n\r\n![Fig. 2 - Target objects ground truth masks](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/2%20-%20Target%20objects%20ground%20truth%20masks.png)\r\nFig. 2 - Target objects ground truth masks\r\n\r\n\r\n\r\n![Fig. 3 - Results obtained with STAR detector, SIFT extractor, FLANN matcher and ANN classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/3%20-%20Results%20obtained%20with%20STAR%20detector,%20SIFT%20extractor,%20FLANN%20matcher%20and%20ANN%20classifier.png)\r\nFig. 3 - Results obtained with STAR detector, SIFT extractor, FLANN matcher and ANN classifier\r\n\r\n\r\n\r\n![Fig. 4 - Results with partially occluded objects obtained with STAR detector, SURF extractor, FLANN matcher and SVM classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/4%20-%20Results%20obtained%20with%20STAR%20detector,%20SURF%20extractor,%20FLANN%20matcher%20and%20SVM%20classifier.png)\r\nFig. 4 - Results with partially occluded objects obtained with STAR detector, SURF extractor, FLANN matcher and SVM classifier\r\n\r\n\r\n\r\n![Fig. 5 - Results obtained with STAR detector, FREAK extractor, FLANN matcher and SVM classifier classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/5%20-%20Results%20obtained%20with%20STAR%20detector,%20FREAK%20extractor,%20FLANN%20matcher%20and%20SVM%20classifier.png)\r\nFig. 5 - Results obtained with STAR detector, FREAK extractor, FLANN matcher and SVM classifier\r\n\r\n\r\n\r\n![Fig. 6 - Results obtained with STAR detector, SIFT extractor, FLANN matcher and SVM classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/6%20-%20Results%20obtained%20with%20STAR%20detector,%20SIFT%20extractor,%20FLANN%20matcher%20and%20SVM%20classifier.png)\r\nFig. 6 - Results obtained with STAR detector, SIFT extractor, FLANN matcher and SVM classifier\r\n\r\n\r\n\r\n![Fig. 7 - Results obtained with SURF detector, SURF extractor, FLANN matcher and ANN classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/7%20-%20Results%20obtained%20with%20SURF%20detector,%20SURF%20extractor,%20FLANN%20matcher%20and%20ANN%20classifier.png)\r\nFig. 7 - Results obtained with SURF detector, SURF extractor, FLANN matcher and ANN classifier\r\n\r\n\r\n\r\n![Fig. 8 - Results obtained with FAST detector, SURF extractor, FLANN matcher and ANN classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/8%20-%20Results%20obtained%20with%20FAST%20detector,%20SURF%20extractor,%20FLANN%20matcher%20and%20ANN%20classifier.png)\r\nFig. 8 - Results obtained with FAST detector, SURF extractor, FLANN matcher and ANN classifier\r\n\r\n\r\n\r\n![Fig. 9 - Results obtained with ORB detector, ORB extractor, FLANN matcher and ANN classifier](https://raw2.github.com/carlosmccosta/Car-Detection/master/Results/Representative%20results/9%20-%20Results%20obtained%20with%20ORB%20detector,%20ORB%20extractor,%20FLANN%20matcher%20and%20ANN%20classifier.png)\r\nFig. 9 - Results obtained with ORB detector, ORB extractor, FLANN matcher and ANN classifier\r\n\r\n\r\n## Releases\r\n***\r\n[Windows 8.1 release](https://github.com/carlosmccosta/Car-Detection/releases)\r\n\r\n\r\n\r\n## Building and developing\r\n***\r\nThe setup instructions on how to build and develop in Visual Studio is available [here](https://github.com/carlosmccosta/Car-Detection/blob/master/CarDetection/docs/Visual%20Studio%20configuration%20for%20OpenCV%202.4.7.txt)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}